<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Druid简介</title>
      <link href="/2019/10/22/Druid%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/10/22/Druid%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h2><p>Apache Druid (incubating) 是一个为对大型数据集进行快速切片和OLAP查询而设计的实时分析数据库。Druid作为数据库主要在以下场景被使用：</p><ul><li>实时数据采集</li><li>高性能的数据查询</li><li>要求服务高可用</li></ul><p>因此，Druid经常为BI提供支持，或者作为需要快速聚合的高并发接口的后端。Druid最适合处理面向事件的数据。</p><p>Druid常见的应用领域包括：</p><ul><li>点击流分析（网络和移动设备）</li><li>网络遥测分析（网络性能监测）</li><li>服务器指标存储</li><li>供应链分析（制造指标）</li><li>应用程序性能指标</li><li>数字营销/广告分析</li><li>商业智能（BI）/ OLAP</li></ul><p>Druid的核心架构结合了数据仓库、时序数据库和日志检索系统的思想。主要有如下特点：</p><ol><li>列式存储</li><li>可扩展的分布式系统</li><li>大规模的并行处理</li><li>实时或批量的数据采集</li><li>自愈、负载均衡、易于操作</li><li>云原生架构、不会丢失数据的容错架构</li><li>用户快速删选数据的索引</li><li>基于时间分区</li><li>近似算法</li><li>在数据采集时自动汇总</li></ol><h2 id="Druid选型"><a href="#Druid选型" class="headerlink" title="Druid选型"></a>Druid选型</h2><p>如果符合以下部分场景，Druid是一个很好的选择：</p><ul><li>插入频率高，但是很少更新（时序数据）</li><li>大多数的查询都是聚合和报表查询（分组查询）</li><li>对查询的延迟有要求（100ms到几分钟）</li><li>您的数据有一个时间组件</li><li>您可能有多个表，但每个查询只能访问一个大的分布式表。查询可能会遇到多个较小的“查找表”</li><li>您有高基数数据列（例如URL、用户ID），需要对它们进行快速计数和排名</li><li>您希望从kafka、HDFS、平面文件或类似Amazon S3的对象存储中加载数据</li></ul><p>对于以下场景，Druid并不擅长：</p><ul><li>您需要根据主键低延迟地更新数据（Druid支持流式插入，但不支持流式更新）</li><li>您正在构建一个离线的报表系统，并且对于查询延迟没有要求</li><li>您需要支持多表的JOIN操作，并且可以接受这些查询很耗时</li></ul><h2 id="Druid架构"><a href="#Druid架构" class="headerlink" title="Druid架构"></a>Druid架构</h2><p><img src="https://druid.apache.org/docs/latest/assets/druid-architecture.png" alt="Druid Architecture"></p><p>Druid服务包含以下节点类型：</p><ul><li>Coordinator</li><li>Overload</li><li>Broker</li><li>Router</li><li>Historical</li><li>MiddleManager</li></ul><p>除了上述内部的节点，Druid还有三个外部依赖：</p><ul><li><p>Zookeeper</p><p>Druid利用Zookeeper来实现集群状态的管理，主要实现如下操作：</p><ol><li>Coordinator节点Leader的选举</li><li>从Historical节点发布Segment</li><li>Coordinator和Historical间Segment的加载/删除</li><li>Overload和MiddleManager的任务管理</li></ol></li><li><p>Metadata Storage</p><p>在单节点中，它通常是本地存储的Apache Derby数据库（不适用于生产）</p><p>在集群模式中，它通常是MySQL或者PostgreSQL这样的关系型数据库</p></li><li><p>Deep Storage</p><p>支持HDFS、S3、Google Cloud Storage、Microsoft Azure、Apache Cassandra、Rackspace Cloudfiles、Microsoft SQLServer等</p></li></ul><p>Druid的各服务节点可以部署在任务地方，但是为了更方便的部署，官方建议按照如下的服务类型进行部署：</p><ul><li><p>Master Servers</p><p>运行Coordinator和Overlord节点，管理数据可用性和采集</p></li><li><p>Query Servers</p><p>运行Broker和可选的Router节点，处理来自外部客户端的查询请求</p></li><li><p>Data Servers</p><p>运行Historical和MiddleManager节点，执行数据采集的工作并且存储所有可查询的数据</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之单例模式</title>
      <link href="/2019/07/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2013/07/16/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2013/07/16/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>设计模式是指针对软件开发过程中重复发生的问题的解决方法。说起设计模式，最有名的就是GoF的23种设计模式（本次整理的也均为这23种设计模式）。  </p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>GoF将设计模式分为以下三类:  </p><ul><li><p><strong>创建型设计模式，共5种</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 工厂方法模式（Factory Method Pattern）</span><br><span class="line"></span><br><span class="line">2. 抽象工厂模式（Abstract Factory Pattern）</span><br><span class="line"></span><br><span class="line">3. 单例模式（Singleton Pattern）</span><br><span class="line"></span><br><span class="line">4. 建造者模式（Builder Pattern）</span><br><span class="line"></span><br><span class="line">5. 原型模式（Prototype Pattern）</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>结构型设计模式，共7种</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 适配器模式（Adapter Pattern）</span><br><span class="line"></span><br><span class="line">2. 桥接模式（Bridge Pattern）</span><br><span class="line"></span><br><span class="line">3. 组合模式（Composite Pattern）</span><br><span class="line"></span><br><span class="line">4. 装饰者模式（Decorator Pattern）</span><br><span class="line"></span><br><span class="line">5. 外观模式（Facade Pattern）</span><br><span class="line"></span><br><span class="line">6. 享元模式（Flyweight Pattern）</span><br><span class="line"></span><br><span class="line">7. 代理模式（Proxy Pattern）</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>行为型设计模式，共11种</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 责任链模式（Chain of Responsibility Pattern）</span><br><span class="line"></span><br><span class="line">2. 命令模式（Command Pattern）</span><br><span class="line"></span><br><span class="line">3. 解释者模式（Interpreter Pattern）</span><br><span class="line"></span><br><span class="line">4. 迭代模式（Iterator Pattern）</span><br><span class="line"></span><br><span class="line">5. 中介者模式（Mediator Pattern）</span><br><span class="line"></span><br><span class="line">6. 备忘录模式（Memento Pattern）</span><br><span class="line"></span><br><span class="line">7. 观察者模式（Observer Pattern）</span><br><span class="line"> </span><br><span class="line">8. 状态模式（State Pattern）</span><br><span class="line"> </span><br><span class="line">9. 策略模式（Strategy Pattern）</span><br><span class="line"> </span><br><span class="line">10.模板方法模式（Template Method Pattern）</span><br><span class="line"> </span><br><span class="line">11.访问者模式（Visitor Pattern）</span><br></pre></td></tr></table></figure></li></ul><h2 id="设计模式6大原则"><a href="#设计模式6大原则" class="headerlink" title="设计模式6大原则"></a>设计模式6大原则</h2><ol><li><p><strong>开闭原则 （Open Close Principle）</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对扩展开放，对修改关闭。实现开闭原则的关键就在于“抽象”，用抽象去构建框架，用实现扩展细节。因为抽象灵活性好，适应性广，</span><br><span class="line">只要抽象的合理，可以基本保持软件架构的稳定。</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>里氏替换原则（Liskov Substitution Principle）</strong>  </p><blockquote><p>“Inheritance should ensure that any property proved about supertype objects also holds for subtype objects.”——“继承必须确保超类所拥有的性质在子类中仍然成立。”</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</span><br></pre></td></tr></table></figure></li><li><p><strong>依赖倒置原则（Dependence Inversion Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">针对接口编程，依赖于抽象而不依赖于具体。</span><br></pre></td></tr></table></figure></li><li><p><strong>接口隔离原则（Interface Segregation Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，</span><br><span class="line">使设计复杂化。所以一定要适度。</span><br><span class="line"></span><br><span class="line">为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，</span><br><span class="line">才能建立最小的依赖关系。</span><br><span class="line"></span><br><span class="line">提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</span><br></pre></td></tr></table></figure></li><li><p><strong>迪米特法则（Demeter Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Talk only to your immediate friends。  </span><br><span class="line"></span><br><span class="line">外观模式（Facade）和中介者模式（Mediator），都是迪米特法则应用的例子。</span><br></pre></td></tr></table></figure></li><li><p><strong>合成复用原则（Composite Reuse Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尽量使用对象组合，而不是继承来达到复用的目的。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
