<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java设计模式之单例模式</title>
      <link href="/2019/07/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2013/07/16/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2013/07/16/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>设计模式是指针对软件开发过程中重复发生的问题的解决方法。说起设计模式，最有名的就是GoF的23种设计模式（本次整理的也均为这23种设计模式）。  </p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>GoF将设计模式分为以下三类:  </p><ul><li><p><strong>创建型设计模式，共5种</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 工厂方法模式（Factory Method Pattern）</span><br><span class="line"></span><br><span class="line">2. 抽象工厂模式（Abstract Factory Pattern）</span><br><span class="line"></span><br><span class="line">3. 单例模式（Singleton Pattern）</span><br><span class="line"></span><br><span class="line">4. 建造者模式（Builder Pattern）</span><br><span class="line"></span><br><span class="line">5. 原型模式（Prototype Pattern）</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>结构型设计模式，共7种</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 适配器模式（Adapter Pattern）</span><br><span class="line"></span><br><span class="line">2. 桥接模式（Bridge Pattern）</span><br><span class="line"></span><br><span class="line">3. 组合模式（Composite Pattern）</span><br><span class="line"></span><br><span class="line">4. 装饰者模式（Decorator Pattern）</span><br><span class="line"></span><br><span class="line">5. 外观模式（Facade Pattern）</span><br><span class="line"></span><br><span class="line">6. 享元模式（Flyweight Pattern）</span><br><span class="line"></span><br><span class="line">7. 代理模式（Proxy Pattern）</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>行为型设计模式，共11种</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 责任链模式（Chain of Responsibility Pattern）</span><br><span class="line"></span><br><span class="line">2. 命令模式（Command Pattern）</span><br><span class="line"></span><br><span class="line">3. 解释者模式（Interpreter Pattern）</span><br><span class="line"></span><br><span class="line">4. 迭代模式（Iterator Pattern）</span><br><span class="line"></span><br><span class="line">5. 中介者模式（Mediator Pattern）</span><br><span class="line"></span><br><span class="line">6. 备忘录模式（Memento Pattern）</span><br><span class="line"></span><br><span class="line">7. 观察者模式（Observer Pattern）</span><br><span class="line"> </span><br><span class="line">8. 状态模式（State Pattern）</span><br><span class="line"> </span><br><span class="line">9. 策略模式（Strategy Pattern）</span><br><span class="line"> </span><br><span class="line">10.模板方法模式（Template Method Pattern）</span><br><span class="line"> </span><br><span class="line">11.访问者模式（Visitor Pattern）</span><br></pre></td></tr></table></figure></li></ul><h2 id="设计模式6大原则"><a href="#设计模式6大原则" class="headerlink" title="设计模式6大原则"></a>设计模式6大原则</h2><ol><li><p><strong>开闭原则 （Open Close Principle）</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对扩展开放，对修改关闭。实现开闭原则的关键就在于“抽象”，用抽象去构建框架，用实现扩展细节。因为抽象灵活性好，适应性广，</span><br><span class="line">只要抽象的合理，可以基本保持软件架构的稳定。</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>里氏替换原则（Liskov Substitution Principle）</strong>  </p><blockquote><p>“Inheritance should ensure that any property proved about supertype objects also holds for subtype objects.”——“继承必须确保超类所拥有的性质在子类中仍然成立。”</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</span><br></pre></td></tr></table></figure></li><li><p><strong>依赖倒置原则（Dependence Inversion Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">针对接口编程，依赖于抽象而不依赖于具体。</span><br></pre></td></tr></table></figure></li><li><p><strong>接口隔离原则（Interface Segregation Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，</span><br><span class="line">使设计复杂化。所以一定要适度。</span><br><span class="line"></span><br><span class="line">为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，</span><br><span class="line">才能建立最小的依赖关系。</span><br><span class="line"></span><br><span class="line">提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</span><br></pre></td></tr></table></figure></li><li><p><strong>迪米特法则（Demeter Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Talk only to your immediate friends。  </span><br><span class="line"></span><br><span class="line">外观模式（Facade）和中介者模式（Mediator），都是迪米特法则应用的例子。</span><br></pre></td></tr></table></figure></li><li><p><strong>合成复用原则（Composite Reuse Principle）</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尽量使用对象组合，而不是继承来达到复用的目的。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
